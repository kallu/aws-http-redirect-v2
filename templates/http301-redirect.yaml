AWSTemplateFormatVersion: "2010-09-09"
Description: Serverless HTTP 301 redirector
Transform: 'AWS::LanguageExtensions'

Metadata:

  AWS::CloudFormation::Interface:
    ParameterGroups:
      - Label:
          default: Network configuration
        Parameters:
          - CertId
          - AllowAccessCIDR

Parameters:

  AllowAccessCIDR:
    Type: String
    AllowedPattern: ^((([01]?[0-9]?[0-9]|2([0-4][0-9]|5[0-5]))\.){3}([01]?[0-9]?[0-9]|2([0-4][0-9]|5[0-5]))/([0-2]?[0-9]|3[0-2])){1}$
    Description: CIDR allowed for HTTP(S) access
    Default: 0.0.0.0/0

  CertId:
    Type: String
    Description: ACM certificate ID, required to enable HTTPS

Mappings:

  RedirectRule:
      '100':
        Name: carriagereturn.com
        Protocol: HTTPS
        Port: 443
        Host: carriagereturn.nl
        Path: '/#{path}'
      '101':
        Name: carriagereturn.fi
        Protocol: HTTPS
        Port: 443
        Host: carriagereturn.nl
        Path: '/fi/#{path}'
    
Conditions:

  ListenHTTPS: !Not
    - !Equals
      - !Ref CertId
      - ''

Resources:

  VPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: 192.168.0.0/24
      Tags:
        - Key: Name
          Value: !Sub ${AWS::StackName}

  SubnetA:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      AvailabilityZone: !Sub ${AWS::Region}a
      CidrBlock: 192.168.0.0/25
      Tags:
        - Key: Name
          Value: !Sub ${AWS::StackName} subnet A

  SubnetB:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      AvailabilityZone: !Sub ${AWS::Region}b
      CidrBlock: 192.168.0.128/25
      Tags:
        - Key: Name
          Value: !Sub ${AWS::StackName} subnet B

  SecGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      VpcId: !Ref VPC
      GroupDescription: !Sub ${AWS::StackName} HTTP redirector ALB

  SGroupIngress80:
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      GroupId: !Ref SecGroup
      CidrIp: !Ref AllowAccessCIDR
      Description: !Sub Allow HTTP from ${AllowAccessCIDR}
      FromPort: 80
      IpProtocol: TCP
      ToPort: 80

  SGroupIngress443:
    Type: AWS::EC2::SecurityGroupIngress
    Condition: ListenHTTPS
    Properties:
      GroupId: !Ref SecGroup
      CidrIp: !Ref AllowAccessCIDR
      Description: !Sub Allow HTTPS from ${AllowAccessCIDR}
      FromPort: 443
      IpProtocol: TCP
      ToPort: 443

  ALB:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties:
      Type: application
      Scheme: internal
      SecurityGroups:
        - !Ref SecGroup
      Subnets:
        - !Ref SubnetA
        - !Ref SubnetB
      Tags:
        - Key: Name
          Value: !Ref AWS::StackName

  HTTPListener:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      DefaultActions:
        - Type: fixed-response
          FixedResponseConfig:
            ContentType: text/plain
            MessageBody: 200 OK
            StatusCode: 200
      LoadBalancerArn: !Ref ALB
      Port: 80
      Protocol: HTTP

  HTTPSListener:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Condition: ListenHTTPS
    Properties:
      DefaultActions:
        - Type: fixed-response
          FixedResponseConfig:
            ContentType: text/plain
            MessageBody: 200 OK
            StatusCode: 200
      LoadBalancerArn: !Ref ALB
      Port: 443
      Protocol: HTTPS
      Certificates:
        - CertificateArn: !Sub arn:aws:acm:${AWS::Region}:${AWS::AccountId}:certificate/${CertId}

  'Fn::ForEach::RedirectRule':
  - R
  - [ '100', '101' ]
  - HTTPListenerRule${R}:
      Type: "AWS::ElasticLoadBalancingV2::ListenerRule"
      Properties:
        ListenerArn: !Ref HTTPListener
        Priority: !Ref R
        Conditions:
          - Field: host-header
            Values:
              - !FindInMap [ RedirectRule, !Ref R, Name ]
        Actions:
          - Type: redirect
            RedirectConfig:
              Host: !FindInMap [ RedirectRule, !Ref R, Host ]
              Path: !FindInMap [ RedirectRule, !Ref R, Path ]
              Port: !FindInMap [ RedirectRule, !Ref R, Port ]
              Protocol: !FindInMap [ RedirectRule, !Ref R, Protocol ]
              Query: "#{query}"
              StatusCode: HTTP_301

    HTTPSListenerRule${R}:
      Type: "AWS::ElasticLoadBalancingV2::ListenerRule"
      Condition: ListenHTTPS
      Properties:
        ListenerArn: !Ref HTTPSListener
        Priority: !Ref R
        Conditions:
          - Field: host-header
            Values:
              - !FindInMap [ RedirectRule, !Ref R, Name]
        Actions:
          - Type: redirect
            RedirectConfig:
              Host: !FindInMap [ RedirectRule, !Ref R, Host ]
              Path: !FindInMap [ RedirectRule, !Ref R, Path ]
              Port: !FindInMap [ RedirectRule, !Ref R, Port ]
              Protocol: !FindInMap [ RedirectRule, !Ref R, Protocol ]
              Query: "#{query}"
              StatusCode: HTTP_301

  GA:
    Type: AWS::GlobalAccelerator::Accelerator
    Properties:
      Name: !Ref AWS::StackName
      IpAddressType: IPV4
      Enabled: true

  GAListener:
    Type: AWS::GlobalAccelerator::Listener
    Properties:
      AcceleratorArn: !Ref GA
      PortRanges:
        - FromPort: 80
          ToPort: 80
        - FromPort: 443
          ToPort: 443
      Protocol: TCP
      ClientAffinity: NONE

  GAEndPointGroup:
    Type: AWS::GlobalAccelerator::EndpointGroup
    Properties:
      ListenerArn: !Ref GAListener
      EndpointGroupRegion: !Ref AWS::Region
      EndpointConfigurations:
        - ClientIPPreservationEnabled: true
          EndpointId: !Ref ALB
          Weight: 100
      TrafficDialPercentage: 100
      HealthCheckPort: 80
      HealthCheckProtocol: HTTP
      HealthCheckPath: /
      HealthCheckIntervalSeconds: 30
      ThresholdCount: 3

Outputs:
  RedirectorDNS:
    Description: DNS name for redirector static IPs
    Value: !GetAtt GA.DnsName
